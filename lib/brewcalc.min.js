(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("brewcalc", [], factory);
	else if(typeof exports === 'object')
		exports["brewcalc"] = factory();
	else
		root["brewcalc"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/brewcalc.js":
/*!*************************!*\
  !*** ./src/brewcalc.js ***!
  \*************************/
/*! exports provided: originalGravity, finalGravity, boilGravity, gravityPoints, estABW, estABV, estABVrealExtract, srmToRgb, colorSRM, srmToCss, yeastNeeded, yeastCount, yeastStarterGrow, carbonation, calcCalories */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"originalGravity\", function() { return originalGravity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"finalGravity\", function() { return finalGravity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"boilGravity\", function() { return boilGravity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gravityPoints\", function() { return gravityPoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"estABW\", function() { return estABW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"estABV\", function() { return estABV; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"estABVrealExtract\", function() { return estABVrealExtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"srmToRgb\", function() { return srmToRgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"colorSRM\", function() { return colorSRM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"srmToCss\", function() { return srmToCss; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"yeastNeeded\", function() { return yeastNeeded; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"yeastCount\", function() { return yeastCount; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"yeastStarterGrow\", function() { return yeastStarterGrow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"carbonation\", function() { return carbonation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calcCalories\", function() { return calcCalories; });\n/* harmony import */ var _types_fermentable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/fermentable */ \"./src/types/fermentable.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _types_yeast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/yeast */ \"./src/types/yeast.js\");\n\n\n\nvar originalGravity = function originalGravity(batchSize, ogPts) {\n  return 1.0 + ogPts / Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"litersToGallons\"])(batchSize);\n};\nvar finalGravity = function finalGravity(batchSize, fgPts) {\n  return 1.0 + fgPts / Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"litersToGallons\"])(batchSize);\n};\nvar boilGravity = function boilGravity(batchSize, boilSize, og) {\n  return 1 + (og - 1) * Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"litersToGallons\"])(batchSize) / Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"litersToGallons\"])(boilSize);\n}; // Sugar provides 46 gravity points per pound, per gallon (PPPG).\n// 1 pound = 16 oz (weight/mass)\n// 1 gallon = 128 fl oz\n// yield and efficiency should be parsed from recipe as percent values\n// The maximum potential is approximately 1.046 which would be a pound of pure sugar in a gallon of water.\n\nvar fermentableGravityPoints = function fermentableGravityPoints(potential, amount, efficiency) {\n  if (efficiency === void 0) {\n    efficiency = 1;\n  }\n\n  return (potential - 1) * Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"kgToPounds\"])(amount) * efficiency;\n};\n\nvar fermentableEfficiency = function fermentableEfficiency(type, equipmentEfficiency, sugarEfficiency) {\n  if (sugarEfficiency === void 0) {\n    sugarEfficiency = 1;\n  }\n\n  return type === _types_fermentable__WEBPACK_IMPORTED_MODULE_0__[\"FermentableTypes\"].extract || type === _types_fermentable__WEBPACK_IMPORTED_MODULE_0__[\"FermentableTypes\"].sugar || type === _types_fermentable__WEBPACK_IMPORTED_MODULE_0__[\"FermentableTypes\"].dryExtract ? sugarEfficiency : equipmentEfficiency;\n};\n\nvar gravityPoints = function gravityPoints(fermentables, efficiency, attenutation) {\n  if (attenutation === void 0) {\n    attenutation = 0;\n  }\n\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"sum\"])(fermentables.map(function (_ref) {\n    var type = _ref.type,\n        potential = _ref.potential,\n        amount = _ref.amount;\n    return fermentableGravityPoints(potential, amount, (1 - attenutation) * fermentableEfficiency(type, efficiency));\n  }));\n}; // http://byo.com/bock/item/408-calculating-alcohol-content-attenuation-extract-and-calories-advanced-homebrewing\n// https://www.brewersfriend.com/2011/06/16/alcohol-by-volume-calculator-updated/\n// ABW = (OG points - FG points) * 0.105\n// ABV = (OG points - FG points) * 0.132\n\nvar estABW = function estABW(ogPts, fgPts) {\n  return (ogPts - fgPts) * 0.105;\n};\nvar estABV = function estABV(ogPts, fgPts) {\n  return (ogPts - fgPts) * 0.132;\n}; // http://beersmith.com/blog/2010/09/07/apparent-and-real-attenuation-for-beer-brewers-part-1/\n\nvar estABVrealExtract = function estABVrealExtract(og, fg) {\n  var oe = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"sgToPlato\"])(og);\n  var ae = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"sgToPlato\"])(fg);\n  var re = 0.1808 * oe + 0.8192 * ae;\n  var abw = (oe - re) / (2.0665 - 0.010665 * oe);\n  var abv = abw * (fg / 0.79661);\n  return abv;\n}; // MCU = (weight of grain in lbs)*(color of grain in lovibond) / (volume in gal) SRM = 1.4922 * MCU ^ 0.6859\n\nvar mcu2srm = function mcu2srm(mcu) {\n  return 1.4922 * Math.pow(mcu, 0.6859);\n};\n\nvar calcMCU = function calcMCU(_ref2) {\n  var amount = _ref2.amount,\n      color = _ref2.color;\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"kgToPounds\"])(amount) * color;\n};\n\nvar srmToRgb = function srmToRgb(srm) {\n  return {\n    r: Math.round(Math.min(255, Math.max(0, 255 * Math.pow(0.975, srm)))),\n    g: Math.round(Math.min(255, Math.max(0, 255 * Math.pow(0.88, srm)))),\n    b: Math.round(Math.min(255, Math.max(0, 255 * Math.pow(0.7, srm))))\n  };\n};\nvar colorSRM = function colorSRM(fermentables, postBoilVolime) {\n  return mcu2srm(Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"sum\"])(fermentables.map(calcMCU)) / Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"litersToGallons\"])(postBoilVolime));\n};\nvar srmToCss = function srmToCss(srm) {\n  var color = srmToRgb(srm);\n  return \"rgb(\" + color.r + \", \" + color.g + \", \" + color.b + \")\";\n}; // https://www.brewersfriend.com/yeast-pitch-rate-and-starter-calculator/\n// million cells / ml / degree Plato\n// Minimum manufacturer's recommendation: 0.35 (ale only, fresh yeast only)\n// Middle of the road Pro Brewer 0.75 (ale)\n// Pro Brewer 1.00 (high gravity ale)\n// Pro Brewer 1.50 (minimum for lager)\n// Pro Brewer 2.0 (high gravity lager)\n// cellDensity = billion cells / gram\n// Safale K-97\t14\n// Safale S-04\t8\n// Safbrew T-58\t18\n// Safbrew S-33\t16\n// Saflager S-23\t10\n// Saflager S-189\t9\n// A pack/vial contains 100 billion cells at the date of manufacture.\n// Liquid yeast viability drops 21% each month, or 0.7% each day, from the date of manufacture.\n// The assumption is the yeast viability drops in a linear fashion. In 4.75 months or 143 days, this calculator assumes the yeast is 100% dead (100 / 0.7 = ~143).\n// million 10 ^ 6\n// billion 10 ^ 9\n\nvar yeastNeeded = function yeastNeeded(pitchRate, batchSize, e) {\n  return pitchRate * (batchSize * 1000) * e / 1000;\n};\n\nvar viability = function viability(currentDate, cultureDate) {\n  if (cultureDate === void 0) {\n    cultureDate = new Date().toString();\n  }\n\n  return 100 - Math.floor((Date.parse(currentDate) - Date.parse(cultureDate)) / 86400000) * 0.7;\n};\n\nvar yeastCount = function yeastCount(_ref3, currentDate, cellDensity, // billion cells / ml\nslurryDensity) {\n  var amount = _ref3.amount,\n      form = _ref3.form,\n      cultureDate = _ref3.cultureDate;\n\n  if (currentDate === void 0) {\n    currentDate = new Date().toString();\n  }\n\n  if (cellDensity === void 0) {\n    cellDensity = 8;\n  }\n\n  if (slurryDensity === void 0) {\n    slurryDensity = 1;\n  }\n\n  switch (form) {\n    case _types_yeast__WEBPACK_IMPORTED_MODULE_2__[\"YeastForms\"].dry:\n      return cellDensity * amount * 1000;\n\n    case _types_yeast__WEBPACK_IMPORTED_MODULE_2__[\"YeastForms\"].liquid:\n      return 100 * (viability(currentDate, cultureDate) / 100) * amount;\n\n    case _types_yeast__WEBPACK_IMPORTED_MODULE_2__[\"YeastForms\"].slant:\n      return slurryDensity * amount * 1000;\n\n    default:\n      throw new Error('NotImplementedError');\n  }\n};\n\nvar yeastGrowth = function yeastGrowth(ratio) {\n  return 2.33 - 0.67 * ratio;\n};\n\nvar growthRateCurveBraukaiserStir = function growthRateCurveBraukaiserStir(ratio) {\n  return ratio < 1.4 ? 1.4 : ratio >= 1.4 && ratio <= 3.5 && yeastGrowth(ratio) > 0 ? yeastGrowth(ratio) : 0;\n};\n\nvar yeastStarterGrow = function yeastStarterGrow(startingYeastCount, starterSize, gravity, batchSize) {\n  var volumeLevel = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"litersToGallons\"])(starterSize);\n  var pointsNeeded = volumeLevel * (gravity - 1) * 1000;\n  var poundsDME = pointsNeeded / 42;\n  var gramsDME = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"poundsTokg\"])(poundsDME) * 1000;\n  var cellsToGramsRatio = startingYeastCount / gramsDME;\n  var growthRate = growthRateCurveBraukaiserStir(cellsToGramsRatio);\n  var endingCount = gramsDME * growthRate + startingYeastCount;\n  var pitchRate = endingCount * 1000 / Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"sgToPlato\"])(gravity) / (batchSize / 1000);\n  return {\n    growthRate: growthRate,\n    endingCount: endingCount,\n    pitchRate: pitchRate\n  };\n}; // https://byo.com/yeast/item/164-balancing-your-draft-system-advanced-brewing\n\nvar kegPressure = function kegPressure(carbVolume, t) {\n  return Math.max(0, -16.6999 - 0.0101059 * t + 0.00116512 * t * t + 0.173354 * t * carbVolume + 4.24267 * carbVolume - 0.0684226 * carbVolume * carbVolume);\n}; // http://www.homebrewtalk.com/showthread.php?t=441383\n\n\nvar primingSugar = function primingSugar(carbVolume, t, batchSize) {\n  return 15.195 * batchSize * (carbVolume - 3.0378 + 5.0062e-2 * t - 2.6555e-4 * t * t);\n};\n\nvar normalizeTemp = function normalizeTemp(t) {\n  return Math.max(32.0, Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"celsiusToFahrenheit\"])(t));\n};\n\nvar carbonation = function carbonation(carbVolume, t, batchSize) {\n  var sugar = primingSugar(carbVolume, normalizeTemp(t), Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"litersToGallons\"])(batchSize));\n  return {\n    kegPressure: kegPressure(carbVolume, normalizeTemp(t)),\n    kegSugar: sugar * 0.5,\n    cornSugar: sugar,\n    dme: sugar * 1.538\n  };\n}; // http://beersmith.com/blog/2011/02/04/counting-calories-in-your-homebrewed-beer/\n// Calorie_from_alcohol = 1881.22 * FG * (OG-FG)/(1.775-OG)\n// Calories_from_carbs = 3550.0 * FG * ((0.1808 * OG) + (0.8192 * FG) – 1.0004)\n// Total calories – just add the Calories_from_alcohol to Calories_from_carbs\n\nvar caloriesAlc = function caloriesAlc(og, fg) {\n  return 1881.22 * fg * ((og - fg) / (1.775 - og));\n};\n\nvar caloriesExt = function caloriesExt(og, fg) {\n  return 3550.0 * fg * (0.1808 * og + 0.8192 * fg - 1.0004);\n};\n\nvar calcCalories = function calcCalories(og, fg) {\n  return caloriesAlc(og, fg) + caloriesExt(og, fg);\n};\n\n//# sourceURL=webpack://brewcalc/./src/brewcalc.js?");

/***/ }),

/***/ "./src/hops.js":
/*!*********************!*\
  !*** ./src/hops.js ***!
  \*********************/
/*! exports provided: bitternessIbuTinseth, bitternessRatio, ragerHopIbu, bitternessIbuRager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bitternessIbuTinseth\", function() { return bitternessIbuTinseth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bitternessRatio\", function() { return bitternessRatio; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ragerHopIbu\", function() { return ragerHopIbu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bitternessIbuRager\", function() { return bitternessIbuRager; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _types_hop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/hop */ \"./src/types/hop.js\");\n\n\n\nvar aromaFactor = function aromaFactor(use) {\n  return use === _types_hop__WEBPACK_IMPORTED_MODULE_1__[\"HopUse\"].aroma || use === _types_hop__WEBPACK_IMPORTED_MODULE_1__[\"HopUse\"].dryHop ? 0 : 1;\n};\n\nvar ibuUtilization = function ibuUtilization(avgBoilGravityPts, boilTime, pelletFactor) {\n  return pelletFactor * 1.65 * Math.pow(0.000125, avgBoilGravityPts) * (1 - Math.pow(Math.E, -0.04 * boilTime)) / 4.15;\n}; // Glenn Tinseth developed the following formula to calculate bitterness in IBUs:\n// IBU = (U * ozs hops * 7490)/Volume (in gallons) U represents the utilization of the hops (conversion to iso-alpha-acids) based on boil time and wort gravity.\n// U = bigness factor * boil time factor\n\n\nvar bitternessIbuTinseth = function bitternessIbuTinseth(hops, avgBoilGravityPts, postBoilVolume) {\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"sum\"])(hops.map(function (_ref) {\n    var amount = _ref.amount,\n        alpha = _ref.alpha,\n        form = _ref.form,\n        time = _ref.time,\n        use = _ref.use;\n    return ibuUtilization(avgBoilGravityPts, time, form === _types_hop__WEBPACK_IMPORTED_MODULE_1__[\"HopForms\"].pellet ? 1.1 : 1) * Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"kgToOunces\"])(amount) * alpha * 7490 / Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"litersToGallons\"])(postBoilVolume) * aromaFactor(use);\n  }));\n}; // The preceived bitterness expressed in a ratio of IBUs to gravity. This is frequently seen expressed as BU/GU.\n// The Gravity Units are the decimal portion of the original gravity\n\nvar bitternessRatio = function bitternessRatio(ibu, gu) {\n  return ibu / gu;\n}; // rager\n\nvar ragerHopGravityAdjustment = function ragerHopGravityAdjustment(sgb) {\n  return sgb <= 1.05 ? 0 : (sgb - 1.05) / 0.2;\n};\n\nvar ragerUtil = function ragerUtil(time) {\n  return 18.11 + 13.86 * Math.tanh((time - 31.32) / 18.27);\n};\n\nvar ragerHopIbuFromWeight = function ragerHopIbuFromWeight(util, alpha, wt, vol, ga, wtFactor) {\n  return util * alpha * wt * wtFactor / (vol * (1.0 + ga));\n};\n\nvar ragerHopIbu = function ragerHopIbu(amount, alpha, time, sg, vol) {\n  return time <= 0.0 || amount <= 0.0 || alpha < 0.0 ? 0 : ragerHopIbuFromWeight(ragerUtil(Math.floor(time + 0.5)) * 0.01, alpha, amount, vol, ragerHopGravityAdjustment(sg), 100.0 / 1.34);\n};\nvar bitternessIbuRager = function bitternessIbuRager(hops, avgBoilGravityPts, postBoilVolume) {\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"sum\"])(hops.map(function (_ref2) {\n    var amount = _ref2.amount,\n        alpha = _ref2.alpha,\n        time = _ref2.time,\n        use = _ref2.use;\n    return ragerHopIbu(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"kgToOunces\"])(amount), alpha * 100, time, avgBoilGravityPts, Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"litersToGallons\"])(postBoilVolume)) * aromaFactor(use);\n  }));\n};\n\n//# sourceURL=webpack://brewcalc/./src/hops.js?");

/***/ }),

/***/ "./src/importFromBeerXml.js":
/*!**********************************!*\
  !*** ./src/importFromBeerXml.js ***!
  \**********************************/
/*! exports provided: importFromBeerXml */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"importFromBeerXml\", function() { return importFromBeerXml; });\n/* harmony import */ var _xmlToJson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xmlToJson */ \"./src/xmlToJson.js\");\n/* harmony import */ var _xmlToJson__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_xmlToJson__WEBPACK_IMPORTED_MODULE_0__);\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\nvar camelCase = function camelCase(str) {\n  return str.length === 0 ? '' : str.length === 1 ? str.toLowerCase() : str.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n};\n\nvar xmlToCamelCase = function xmlToCamelCase(xml) {\n  return xml.replace(/<(?!!)(?!\\?)[^>]*>/g, function (str) {\n    return camelCase(str.toLowerCase());\n  });\n};\n\nvar parseBool = function parseBool(s) {\n  return s === 'TRUE';\n};\n\nvar isBIAB = function isBIAB(mashName) {\n  return mashName.includes('BIAB');\n}; // TODO: May be it is not so good idea. But At the moment I can't figure out best practices for rounding operations.\n\n\nvar dirtyRound = function dirtyRound(n) {\n  return Math.round(n * 100000000000) / 100000000000;\n};\n\nvar importFromBeerXml = function importFromBeerXml(xml) {\n  try {\n    var recipe = _xmlToJson__WEBPACK_IMPORTED_MODULE_0___default()(new DOMParser().parseFromString(xmlToCamelCase(xml), 'text/xml')).recipes.recipe;\n    var fermentableNode = recipe.fermentables.fermentable;\n    var fermentables = Array.from(Array.isArray(fermentableNode) ? fermentableNode : [fermentableNode]).map(function (_ref, i, f) {\n      var name = _ref.name,\n          addAfterBoil = _ref.addAfterBoil,\n          amount = _ref.amount,\n          color = _ref.color,\n          potential = _ref.potential,\n          type = _ref.type;\n      return {\n        name: name,\n        addAfterBoil: parseBool(addAfterBoil),\n        amount: parseFloat(amount),\n        color: parseFloat(color),\n        potential: potential !== undefined ? parseFloat(potential) : parseFloat(f[i][\"yield\"]) * 0.01 * 46 / 1000 + 1,\n        \"yield\": parseFloat(f[i][\"yield\"]),\n        type: type\n      };\n    });\n    var hopNode = recipe.hops.hop;\n    var hops = Array.from(Array.isArray(hopNode) ? hopNode : [hopNode]).map(function (_ref2) {\n      var name = _ref2.name,\n          alpha = _ref2.alpha,\n          amount = _ref2.amount,\n          form = _ref2.form,\n          use = _ref2.use,\n          time = _ref2.time;\n      return {\n        name: name,\n        alpha: parseFloat(alpha) * 0.01,\n        amount: parseFloat(amount),\n        form: form,\n        use: use,\n        time: parseFloat(time)\n      };\n    });\n    var mashStepsNode = recipe.mash.mashSteps.mashStep;\n    var mashSteps = Array.from(Array.isArray(mashStepsNode) ? mashStepsNode : [mashStepsNode]).map(function (_ref3) {\n      var name = _ref3.name,\n          endTemp = _ref3.endTemp,\n          infuseAmount = _ref3.infuseAmount,\n          rampTime = _ref3.rampTime,\n          stepTemp = _ref3.stepTemp,\n          stepTime = _ref3.stepTime,\n          type = _ref3.type;\n      return {\n        name: name,\n        endTemp: parseFloat(endTemp),\n        infuseAmount: parseFloat(infuseAmount),\n        rampTime: parseFloat(rampTime),\n        stepTemp: parseFloat(stepTemp),\n        stepTime: parseFloat(stepTime),\n        type: type\n      };\n    });\n    var mash = {\n      grainTemp: parseFloat(recipe.mash.grainTemp),\n      tunTemp: parseFloat(recipe.mash.tunTemp),\n      equipAdjust: parseBool(recipe.mash.equipAdjust),\n      spargeTemp: parseFloat(recipe.mash.spargeTemp),\n      mashSteps: mashSteps\n    };\n    var yeastNode = recipe.yeasts.yeast;\n    var yeasts = [_extends({\n      name: yeastNode.name,\n      amount: parseFloat(yeastNode.amount)\n    }, yeastNode.attenuation !== undefined ? {\n      attenuation: parseFloat(yeastNode.attenuation) * 0.01\n    } : {}, yeastNode.cultureDate !== undefined ? {\n      cultureDate: yeastNode.cultureDate\n    } : {}, {\n      form: yeastNode.form,\n      type: yeastNode.type\n    })];\n    var recipeNode = recipe;\n    var recipeResult = {\n      name: recipeNode.name,\n      brewer: recipeNode.brewer,\n      batchSize: parseFloat(recipeNode.batchSize),\n      boilSize: parseFloat(recipeNode.boilSize),\n      boilTime: parseFloat(recipeNode.boilTime),\n      efficiency: dirtyRound(parseFloat(recipeNode.efficiency) * 0.01),\n      type: recipeNode.type,\n      fermentables: fermentables,\n      hops: hops,\n      mash: mash,\n      yeasts: yeasts\n    };\n    var equipmentNode = recipe.equipment;\n    var equipment = equipmentNode !== undefined ? {\n      name: equipmentNode.name,\n      batchSize: parseFloat(equipmentNode.batchSize),\n      boilSize: parseFloat(equipmentNode.boilSize),\n      tunWeight: parseFloat(equipmentNode.tunWeight),\n      tunVolume: parseFloat(equipmentNode.tunSpecificHeat),\n      tunSpecificHeat: parseFloat(equipmentNode.tunSpecificHeat),\n      coolingLossPct: parseFloat(equipmentNode.coolingLossPct) * 0.01,\n      evapRate: dirtyRound(parseFloat(equipmentNode.evapRate) * 0.01),\n      lauterDeadspace: parseFloat(equipmentNode.lauterDeadspace),\n      topUpKettle: parseFloat(equipmentNode.topUpKettle),\n      trubChillerLoss: parseFloat(equipmentNode.trubChillerLoss),\n      // TODO:: may be it is part of mashing steps, not eq\n      BIAB: isBIAB(recipe.mash.name)\n    } : null;\n    var specifications = {\n      og: parseFloat(recipeNode.og),\n      fg: parseFloat(recipeNode.fg),\n      abv: parseFloat(recipeNode.abv) * 0.01,\n      color: parseFloat(recipeNode.estColor),\n      ibuMethod: recipeNode.ibuMethod,\n      ibu: parseFloat(recipeNode.ibu),\n      calories: parseFloat(recipeNode.calories)\n    };\n    return {\n      recipe: recipeResult,\n      equipment: equipment,\n      specifications: specifications\n    };\n  } catch (err) {\n    console.log('XML Parser Error: ' + err);\n    throw err;\n  }\n};\n\n//# sourceURL=webpack://brewcalc/./src/importFromBeerXml.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: calculateRecipe, calculateRecipeBeerJSON, originalGravity, finalGravity, boilGravity, gravityPoints, estABW, estABV, estABVrealExtract, srmToRgb, colorSRM, srmToCss, yeastNeeded, yeastCount, yeastStarterGrow, carbonation, calcCalories, bitternessIbuTinseth, bitternessRatio, ragerHopIbu, bitternessIbuRager, mashRecalculate, kgToOunces, kgToPounds, poundsTokg, litersToOunces, ouncesToLiters, litersToGallons, fahrenheitToCelsius, celsiusToFahrenheit, kpaToPsi, psiTokpa, sgToPlato, platoTosg, srmToEbc, ebcToSrm, srmToLovibond, lovibondToSrm, sum, scaleRecipe, calculateVolumes, calcWaterChemistry, FermentableTypes, RecipeTypes, HopForms, HopUse, MashType, YeastForms, YeastTypes, importFromBeerXml */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateRecipe\", function() { return calculateRecipe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateRecipeBeerJSON\", function() { return calculateRecipeBeerJSON; });\n/* harmony import */ var _brewcalc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brewcalc */ \"./src/brewcalc.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"originalGravity\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"originalGravity\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"finalGravity\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"finalGravity\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"boilGravity\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"boilGravity\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"gravityPoints\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"gravityPoints\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"estABW\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"estABW\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"estABV\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"estABV\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"estABVrealExtract\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"estABVrealExtract\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"srmToRgb\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"srmToRgb\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"colorSRM\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"colorSRM\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"srmToCss\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"srmToCss\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"yeastNeeded\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"yeastNeeded\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"yeastCount\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"yeastCount\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"yeastStarterGrow\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"yeastStarterGrow\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"carbonation\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"carbonation\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"calcCalories\", function() { return _brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"calcCalories\"]; });\n\n/* harmony import */ var _hops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hops */ \"./src/hops.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"bitternessIbuTinseth\", function() { return _hops__WEBPACK_IMPORTED_MODULE_1__[\"bitternessIbuTinseth\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"bitternessRatio\", function() { return _hops__WEBPACK_IMPORTED_MODULE_1__[\"bitternessRatio\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ragerHopIbu\", function() { return _hops__WEBPACK_IMPORTED_MODULE_1__[\"ragerHopIbu\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"bitternessIbuRager\", function() { return _hops__WEBPACK_IMPORTED_MODULE_1__[\"bitternessIbuRager\"]; });\n\n/* harmony import */ var _mash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mash */ \"./src/mash.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mashRecalculate\", function() { return _mash__WEBPACK_IMPORTED_MODULE_2__[\"mashRecalculate\"]; });\n\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"kgToOunces\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"kgToOunces\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"kgToPounds\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"kgToPounds\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"poundsTokg\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"poundsTokg\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"litersToOunces\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"litersToOunces\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ouncesToLiters\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"ouncesToLiters\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"litersToGallons\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"litersToGallons\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fahrenheitToCelsius\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"fahrenheitToCelsius\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"celsiusToFahrenheit\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"celsiusToFahrenheit\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"kpaToPsi\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"kpaToPsi\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"psiTokpa\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"psiTokpa\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sgToPlato\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"sgToPlato\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"platoTosg\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"platoTosg\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"srmToEbc\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"srmToEbc\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ebcToSrm\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"ebcToSrm\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"srmToLovibond\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"srmToLovibond\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lovibondToSrm\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"lovibondToSrm\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sum\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"sum\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scaleRecipe\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"scaleRecipe\"]; });\n\n/* harmony import */ var _volumes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./volumes */ \"./src/volumes.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"calculateVolumes\", function() { return _volumes__WEBPACK_IMPORTED_MODULE_4__[\"calculateVolumes\"]; });\n\n/* harmony import */ var _waterChem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./waterChem */ \"./src/waterChem.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"calcWaterChemistry\", function() { return _waterChem__WEBPACK_IMPORTED_MODULE_5__[\"calcWaterChemistry\"]; });\n\n/* harmony import */ var _types_fermentable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types/fermentable */ \"./src/types/fermentable.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FermentableTypes\", function() { return _types_fermentable__WEBPACK_IMPORTED_MODULE_6__[\"FermentableTypes\"]; });\n\n/* harmony import */ var _types_hop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types/hop */ \"./src/types/hop.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"HopForms\", function() { return _types_hop__WEBPACK_IMPORTED_MODULE_7__[\"HopForms\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"HopUse\", function() { return _types_hop__WEBPACK_IMPORTED_MODULE_7__[\"HopUse\"]; });\n\n/* harmony import */ var _types_mashStep__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types/mashStep */ \"./src/types/mashStep.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MashType\", function() { return _types_mashStep__WEBPACK_IMPORTED_MODULE_8__[\"MashType\"]; });\n\n/* harmony import */ var _types_recipe__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./types/recipe */ \"./src/types/recipe.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RecipeTypes\", function() { return _types_recipe__WEBPACK_IMPORTED_MODULE_9__[\"RecipeTypes\"]; });\n\n/* harmony import */ var _types_yeast__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types/yeast */ \"./src/types/yeast.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"YeastForms\", function() { return _types_yeast__WEBPACK_IMPORTED_MODULE_10__[\"YeastForms\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"YeastTypes\", function() { return _types_yeast__WEBPACK_IMPORTED_MODULE_10__[\"YeastTypes\"]; });\n\n/* harmony import */ var _importFromBeerXml_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./importFromBeerXml.js */ \"./src/importFromBeerXml.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"importFromBeerXml\", function() { return _importFromBeerXml_js__WEBPACK_IMPORTED_MODULE_11__[\"importFromBeerXml\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar calculateRecipeBeerJSON = function calculateRecipeBeerJSON(_ref) {\n  var batch_size = _ref.batch_size,\n      boil_size = _ref.boil_size,\n      boil_time = _ref.boil_time,\n      ingredients = _ref.ingredients,\n      efficiency = _ref.efficiency,\n      mash = _ref.mash;\n  var batchSize = batch_size ? batch_size.value : null;\n  var boilSize = boil_size ? boil_size.value : null;\n  var boilTime = boil_time ? boil_time.value : null;\n  var brewHouseEff = efficiency ? efficiency.brewhouse / 100 : null;\n  var fermentables = null,\n      hops = null,\n      yeasts = null;\n\n  if (ingredients) {\n    var fermentable_bill = ingredients.fermentable_bill,\n        hop_bill = ingredients.hop_bill,\n        culture_additions = ingredients.culture_additions;\n    fermentables = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"isNotEmptyArray\"])(fermentable_bill) ? // $FlowFixMe\n    fermentable_bill.map(function (item) {\n      return {\n        type: Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"capitalize\"])(item.type),\n        amount: item.amount.value,\n        potential: item[\"yield\"] * 0.01 * 46 / 1000 + 1,\n        color: item.color.value\n      };\n    }) : null;\n    hops = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"isNotEmptyArray\"])(hop_bill) ? // $FlowFixMe\n    hop_bill.map(function (item) {\n      return {\n        amount: item.amount.value,\n        alpha: item.alpha_acid_units / 100,\n        form: Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"capitalize\"])(item.form),\n        time: item.time.value,\n        use: Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"capitalize\"])(item.use)\n      };\n    }) : null;\n    yeasts = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"isNotEmptyArray\"])(culture_additions) ? // $FlowFixMe\n    culture_additions.map(function (item) {\n      return {\n        attenuation: item.attenuation / 100\n      };\n    }) : null;\n  }\n\n  var mashSteps = null;\n\n  if (mash && Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"isNotEmptyArray\"])(mash.mash_steps)) {\n    mashSteps = {\n      // $FlowFixMe\n      mashSteps: mash.mash_steps.map(function (item) {\n        return {\n          type: Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"capitalize\"])(item.type),\n          infuseAmount: item.infuse_amount.value\n        };\n      })\n    };\n  } // $FlowFixMe\n\n\n  return calculateRecipe({\n    batchSize: batchSize,\n    boilSize: boilSize,\n    boilTime: boilTime,\n    fermentables: fermentables,\n    hops: hops,\n    yeasts: yeasts,\n    efficiency: brewHouseEff,\n    // $FlowFixMe\n    mash: mashSteps\n  });\n};\n\nvar calculateRecipe = function calculateRecipe(_ref2) {\n  var batchSize = _ref2.batchSize,\n      boilSize = _ref2.boilSize,\n      boilTime = _ref2.boilTime,\n      fermentables = _ref2.fermentables,\n      efficiency = _ref2.efficiency,\n      yeasts = _ref2.yeasts,\n      hops = _ref2.hops,\n      mash = _ref2.mash;\n  var og = null,\n      fg = null,\n      ibu = null,\n      abv = null,\n      colorSRMvalue = null,\n      volumes = null;\n\n  if (batchSize && fermentables && efficiency) {\n    og = Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"originalGravity\"])(batchSize, Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"gravityPoints\"])(fermentables, efficiency));\n    colorSRMvalue = Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"colorSRM\"])(fermentables, batchSize);\n\n    if (yeasts) {\n      fg = Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"finalGravity\"])(batchSize, Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"gravityPoints\"])(fermentables, efficiency, yeasts[0].attenuation));\n      abv = Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"estABVrealExtract\"])(Number(og.toFixed(3)), Number(fg.toFixed(2)));\n      var calories = Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"calcCalories\"])(Number(og.toFixed(3)), Number(fg.toFixed(2)));\n      var caloriesInOneL = calories / (12 * Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"ouncesToLiters\"])(1));\n    }\n\n    if (hops && boilSize) {\n      var avgBoilGravityPts = Object(_brewcalc__WEBPACK_IMPORTED_MODULE_0__[\"boilGravity\"])(batchSize, boilSize, og) - 1;\n      ibu = Object(_hops__WEBPACK_IMPORTED_MODULE_1__[\"bitternessIbuTinseth\"])(hops, avgBoilGravityPts, batchSize);\n    }\n  }\n\n  if (mash && boilTime && fermentables && boilSize) {\n    // $FlowFixMe\n    volumes = Object(_volumes__WEBPACK_IMPORTED_MODULE_4__[\"calculateVolumes\"])({\n      fermentables: fermentables,\n      mash: mash,\n      boilTime: boilTime\n    }, {\n      boilSize: boilSize\n    });\n  }\n\n  return {\n    stats: {\n      og: og && Number(og.toFixed(3)),\n      fg: fg && Number(fg.toFixed(3)),\n      ibu: ibu && Number(ibu.toFixed(1)),\n      color: colorSRMvalue && Number(colorSRMvalue.toFixed(1)),\n      abv: abv && Number(abv.toFixed(1))\n    },\n    volumes: volumes\n  };\n};\n\n\n\n//# sourceURL=webpack://brewcalc/./src/index.js?");

/***/ }),

/***/ "./src/mash.js":
/*!*********************!*\
  !*** ./src/mash.js ***!
  \*********************/
/*! exports provided: mashRecalculate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mashRecalculate\", function() { return mashRecalculate; });\n/* harmony import */ var _types_mashStep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/mashStep */ \"./src/types/mashStep.js\");\n\nvar grainVolume = 0.652; // l/kg\n\nvar maltSpecificHeat = 0.38; // Cal/gram-C\n\nvar tunDeadspace = 0;\nvar boilTemp = 100;\n\nvar calcTotVolume = function calcTotVolume(grainVolume, mashGrainWeight, infuseAmount, startVolume) {\n  if (infuseAmount === void 0) {\n    infuseAmount = 0;\n  }\n\n  if (startVolume === void 0) {\n    startVolume = 0;\n  }\n\n  return grainVolume * mashGrainWeight + infuseAmount + startVolume;\n};\n\nvar adjustTunMass = function adjustTunMass(tunVolume, totVolume, tunMass) {\n  tunVolume = tunVolume * 0.8;\n  return tunVolume > 0 && totVolume < tunVolume ? tunMass * totVolume / tunVolume : tunMass;\n};\n\nvar decoctVolume = function decoctVolume(targetTemp, startVolume, startTemp, mashGrainWeight, tunMass, tunSpecificHeat, tunVolume, boilTemp) {\n  var totVolume = calcTotVolume(grainVolume, mashGrainWeight, startVolume);\n  var adjustedTunMass = adjustTunMass(tunVolume, totVolume, tunMass);\n  var fraction = (maltSpecificHeat * mashGrainWeight + tunSpecificHeat * adjustedTunMass + startVolume) / (maltSpecificHeat * mashGrainWeight + startVolume) * (targetTemp - startTemp) / (boilTemp - startTemp);\n\n  if (fraction > 1) {\n    fraction = 1;\n  }\n\n  return totVolume * fraction;\n};\n\nvar infuseTemp = function infuseTemp(infuseAmount, targetTemp, startVolume, startTemp, mashGrainWeight, tunMass, tunSpecificHeat, tunVolume) {\n  if (infuseAmount <= 0) {\n    return targetTemp;\n  }\n\n  var totVolume = calcTotVolume(grainVolume, mashGrainWeight, infuseAmount, startVolume);\n  var adjustedTunMass = adjustTunMass(tunVolume, totVolume, tunMass);\n  return targetTemp + (maltSpecificHeat * mashGrainWeight + tunSpecificHeat * adjustedTunMass + startVolume) * (targetTemp - startTemp) / infuseAmount;\n};\n\nvar mashInTemp = function mashInTemp(infuseAmount, targetTemp, mashGrainWeight, grainTemp, tunMass, tunSpecificHeat, tunVolume, tunTemp) {\n  if (infuseAmount === 0) {\n    return targetTemp;\n  }\n\n  var totVolume = calcTotVolume(grainVolume, mashGrainWeight, infuseAmount);\n  var adjustedTunMass = adjustTunMass(tunVolume, totVolume, tunMass);\n  return targetTemp + (maltSpecificHeat * mashGrainWeight * (targetTemp - grainTemp) + tunSpecificHeat * adjustedTunMass * (targetTemp - tunTemp)) / infuseAmount;\n};\n\nvar mashRecalculate = function mashRecalculate(_ref, _ref2, mashGrainWeight) {\n  var mashSteps = _ref.mashSteps,\n      equipAdjust = _ref.equipAdjust,\n      grainTemp = _ref.grainTemp,\n      _ref$tunTemp = _ref.tunTemp,\n      tunTemp = _ref$tunTemp === void 0 ? 0 : _ref$tunTemp;\n  var _ref2$tunWeight = _ref2.tunWeight,\n      tunWeight = _ref2$tunWeight === void 0 ? 0 : _ref2$tunWeight,\n      _ref2$tunSpecificHeat = _ref2.tunSpecificHeat,\n      tunSpecificHeat = _ref2$tunSpecificHeat === void 0 ? 0 : _ref2$tunSpecificHeat,\n      _ref2$tunVolume = _ref2.tunVolume,\n      tunVolume = _ref2$tunVolume === void 0 ? 0 : _ref2$tunVolume;\n  var tunMass = !equipAdjust ? 0 : tunWeight;\n\n  var calcInfuseStepAmount = function calcInfuseStepAmount(i, infuseAmount) {\n    return i === 0 ? infuseAmount + tunDeadspace : infuseAmount;\n  };\n\n  var calcTotalInfusedOnStepAmount = function calcTotalInfusedOnStepAmount(i, mashSteps) {\n    return mashSteps.slice(0, i).reduce(function (pv, cv, index) {\n      return cv.type !== _types_mashStep__WEBPACK_IMPORTED_MODULE_0__[\"MashType\"].decoction ? calcInfuseStepAmount(index, cv.infuseAmount) : 0;\n    }, 0);\n  };\n\n  return mashSteps.map(function (_ref3, i, mashSteps) {\n    var name = _ref3.name,\n        type = _ref3.type,\n        infuseAmount = _ref3.infuseAmount,\n        stepTemp = _ref3.stepTemp;\n    var infuseStepAmount = calcInfuseStepAmount(i, infuseAmount);\n    var totalInfusedOnStepAmount = calcTotalInfusedOnStepAmount(i, mashSteps);\n    var result = {};\n\n    switch (type) {\n      case _types_mashStep__WEBPACK_IMPORTED_MODULE_0__[\"MashType\"].infusion:\n        result.infussionTemp = i === 0 ? mashInTemp(infuseStepAmount, stepTemp, mashGrainWeight, grainTemp, tunMass, tunSpecificHeat, tunVolume, tunTemp) : infuseTemp(infuseStepAmount, stepTemp, totalInfusedOnStepAmount, mashSteps[i - 1].stepTemp, mashGrainWeight, tunMass, tunSpecificHeat, tunVolume);\n        result.decoctionAmount = 0;\n        break;\n\n      case _types_mashStep__WEBPACK_IMPORTED_MODULE_0__[\"MashType\"].decoction:\n        result.infussionTemp = i === 0 ? mashInTemp(infuseStepAmount, stepTemp, mashGrainWeight, grainTemp, tunMass, tunSpecificHeat, tunVolume, tunTemp) : 0;\n        result.decoctionAmount = i === 0 ? 0 : decoctVolume(stepTemp, totalInfusedOnStepAmount, mashSteps[i - 1].stepTemp, mashGrainWeight, tunMass, tunSpecificHeat, tunVolume, boilTemp);\n        break;\n\n      default:\n        break;\n    }\n\n    return {\n      infuseStepAmount: infuseStepAmount,\n      infussionTemp: result.infussionTemp,\n      decoctionAmount: result.decoctionAmount\n    };\n  });\n};\n\n//# sourceURL=webpack://brewcalc/./src/mash.js?");

/***/ }),

/***/ "./src/types/fermentable.js":
/*!**********************************!*\
  !*** ./src/types/fermentable.js ***!
  \**********************************/
/*! exports provided: FermentableTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FermentableTypes\", function() { return FermentableTypes; });\nvar FermentableTypes = {\n  grain: 'Grain',\n  sugar: 'Sugar',\n  extract: 'Extract',\n  dryExtract: 'Dry Extract',\n  adjunct: 'Adjunct'\n};\n\n//# sourceURL=webpack://brewcalc/./src/types/fermentable.js?");

/***/ }),

/***/ "./src/types/hop.js":
/*!**************************!*\
  !*** ./src/types/hop.js ***!
  \**************************/
/*! exports provided: HopUse, HopForms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HopUse\", function() { return HopUse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HopForms\", function() { return HopForms; });\n// Hop USE May be \"Boil\", \"Dry Hop\", \"Mash\", \"First Wort\" or \"Aroma\".\n// Note that \"Aroma\" and \"Dry Hop\" do not contribute to the bitterness of the beer while the others do.\n// Aroma hops are added after the boil and do not contribute substantially to beer bitterness.\nvar HopUse = {\n  boil: 'Boil',\n  dryHop: 'Dry Hop',\n  mash: 'Mash',\n  firstWort: 'First Wort',\n  aroma: 'Aroma' // Hop FORM May be \"Pellet\", \"Plug\" or \"Leaf\"\n\n};\nvar HopForms = {\n  pellet: 'Pellet',\n  plug: 'Plug',\n  leaf: 'Leaf'\n};\n\n//# sourceURL=webpack://brewcalc/./src/types/hop.js?");

/***/ }),

/***/ "./src/types/mashStep.js":
/*!*******************************!*\
  !*** ./src/types/mashStep.js ***!
  \*******************************/
/*! exports provided: MashType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MashType\", function() { return MashType; });\n// Mash type May be “Infusion”, “Temperature” or “Decoction” depending on the type of step.\n// Infusion denotes adding hot water, Temperature denotes heating with an outside heat source, and decoction denotes drawing off some mash for boiling.\nvar MashType = {\n  infusion: 'Infusion',\n  temperature: 'Temperature',\n  decoction: 'Decoction'\n};\n\n//# sourceURL=webpack://brewcalc/./src/types/mashStep.js?");

/***/ }),

/***/ "./src/types/recipe.js":
/*!*****************************!*\
  !*** ./src/types/recipe.js ***!
  \*****************************/
/*! exports provided: RecipeTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RecipeTypes\", function() { return RecipeTypes; });\nvar RecipeTypes = {\n  extract: 'Extract',\n  partialMash: 'Partial Mash',\n  allGrain: 'All Grain'\n};\n\n//# sourceURL=webpack://brewcalc/./src/types/recipe.js?");

/***/ }),

/***/ "./src/types/yeast.js":
/*!****************************!*\
  !*** ./src/types/yeast.js ***!
  \****************************/
/*! exports provided: YeastTypes, YeastForms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"YeastTypes\", function() { return YeastTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"YeastForms\", function() { return YeastForms; });\nvar YeastTypes = {\n  ale: 'Ale',\n  lager: 'Lager',\n  wheat: 'Wheat',\n  wine: 'Wine',\n  champagne: 'Champagne'\n};\nvar YeastForms = {\n  liquid: 'Liquid',\n  dry: 'Dry',\n  slant: 'Slant',\n  culture: 'Culture'\n};\n\n//# sourceURL=webpack://brewcalc/./src/types/yeast.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: kgToOunces, kgToPounds, poundsTokg, litersToOunces, ouncesToLiters, litersToGallons, fahrenheitToCelsius, celsiusToFahrenheit, kpaToPsi, psiTokpa, sgToPlato, platoTosg, srmToEbc, ebcToSrm, srmToLovibond, lovibondToSrm, sum, scaleRecipe, capitalize, isNotEmptyArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"kgToOunces\", function() { return kgToOunces; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"kgToPounds\", function() { return kgToPounds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"poundsTokg\", function() { return poundsTokg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"litersToOunces\", function() { return litersToOunces; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ouncesToLiters\", function() { return ouncesToLiters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"litersToGallons\", function() { return litersToGallons; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fahrenheitToCelsius\", function() { return fahrenheitToCelsius; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"celsiusToFahrenheit\", function() { return celsiusToFahrenheit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"kpaToPsi\", function() { return kpaToPsi; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"psiTokpa\", function() { return psiTokpa; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sgToPlato\", function() { return sgToPlato; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"platoTosg\", function() { return platoTosg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"srmToEbc\", function() { return srmToEbc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ebcToSrm\", function() { return ebcToSrm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"srmToLovibond\", function() { return srmToLovibond; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lovibondToSrm\", function() { return lovibondToSrm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sum\", function() { return sum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleRecipe\", function() { return scaleRecipe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"capitalize\", function() { return capitalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNotEmptyArray\", function() { return isNotEmptyArray; });\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar kgToOunces = function kgToOunces(k) {\n  return k * 35.2739619;\n};\nvar kgToPounds = function kgToPounds(k) {\n  return kgToOunces(k) / 16;\n};\nvar poundsTokg = function poundsTokg(p) {\n  return p / 2.204;\n};\nvar litersToOunces = function litersToOunces(l) {\n  return l / 0.0295735;\n};\nvar ouncesToLiters = function ouncesToLiters(o) {\n  return o * 0.0295735;\n};\nvar litersToGallons = function litersToGallons(l) {\n  return litersToOunces(l) / 128;\n};\nvar fahrenheitToCelsius = function fahrenheitToCelsius(f) {\n  return (f - 32) / 1.8;\n};\nvar celsiusToFahrenheit = function celsiusToFahrenheit(c) {\n  return c * 1.8 + 32;\n};\nvar kpaToPsi = function kpaToPsi(kpa) {\n  return kpa * 0.14503773773020923;\n};\nvar psiTokpa = function psiTokpa(psi) {\n  return psi * 6.894757293168361;\n};\nvar sgToPlato = function sgToPlato(sg) {\n  return -668.962 + 1262.45 * sg - 776.43 * Math.pow(sg, 2) + 182.94 * Math.pow(sg, 3);\n};\nvar platoTosg = function platoTosg(e) {\n  return 1 + e / (258.6 - e / 258.2 * 227.1);\n};\nvar srmToEbc = function srmToEbc(srm) {\n  return srm * 1.97;\n};\nvar ebcToSrm = function ebcToSrm(ebc) {\n  return ebc * 0.508;\n};\nvar srmToLovibond = function srmToLovibond(srm) {\n  return (srm + 0.76) / 1.3546;\n};\nvar lovibondToSrm = function lovibondToSrm(lovibond) {\n  return 1.3546 * lovibond - 0.76;\n};\nvar sum = function sum(array) {\n  return array.reduce(function (pv, cv) {\n    return pv + cv;\n  }, 0);\n};\n\nvar scaleIngredients = function scaleIngredients(scaleFactor, ingredients) {\n  return ingredients.map(function (i) {\n    return _extends({}, i, {\n      amount: scaleFactor * i.amount\n    });\n  });\n};\n\nvar scaleRecipe = function scaleRecipe(r, _ref) {\n  var batchSize = _ref.batchSize;\n  var scaleFactor = batchSize / r.batchSize;\n  return _extends({}, r, {\n    batchSize: batchSize,\n    fermentables: scaleIngredients(scaleFactor, r.fermentables),\n    hops: scaleIngredients(scaleFactor, r.hops)\n  });\n};\nvar capitalize = function capitalize(str) {\n  var words = str.split(' ');\n  var capitalizedWords = words.map(function (word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  });\n  return capitalizedWords.join(' ');\n};\nvar isNotEmptyArray = function isNotEmptyArray(arr) {\n  if (Array.isArray(arr)) {\n    return arr.length > 0;\n  }\n\n  return false;\n};\n\n//# sourceURL=webpack://brewcalc/./src/utils.js?");

/***/ }),

/***/ "./src/volumes.js":
/*!************************!*\
  !*** ./src/volumes.js ***!
  \************************/
/*! exports provided: calculateVolumes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateVolumes\", function() { return calculateVolumes; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _types_fermentable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/fermentable */ \"./src/types/fermentable.js\");\n/* harmony import */ var _types_mashStep__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/mashStep */ \"./src/types/mashStep.js\");\n\n\n\nvar calculateVolumes = function calculateVolumes(_ref, _ref2) {\n  var fermentables = _ref.fermentables,\n      mash = _ref.mash,\n      boilTime = _ref.boilTime;\n  var boilSize = _ref2.boilSize,\n      _ref2$lauterDeadspace = _ref2.lauterDeadspace,\n      lauterDeadspace = _ref2$lauterDeadspace === void 0 ? 0 : _ref2$lauterDeadspace,\n      _ref2$evapRate = _ref2.evapRate,\n      evapRate = _ref2$evapRate === void 0 ? 0 : _ref2$evapRate,\n      _ref2$coolingLossPct = _ref2.coolingLossPct,\n      coolingLossPct = _ref2$coolingLossPct === void 0 ? 0 : _ref2$coolingLossPct,\n      _ref2$trubChillerLoss = _ref2.trubChillerLoss,\n      trubChillerLoss = _ref2$trubChillerLoss === void 0 ? 0 : _ref2$trubChillerLoss,\n      _ref2$topUpKettle = _ref2.topUpKettle,\n      topUpKettle = _ref2$topUpKettle === void 0 ? 0 : _ref2$topUpKettle,\n      BIAB = _ref2.BIAB;\n  var starterSize = 0;\n  var fermentationLoss = 1.7;\n  var mashGrainWeight = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"sum\"])(fermentables.map(function (_ref3) {\n    var amount = _ref3.amount,\n        type = _ref3.type;\n    return type === _types_fermentable__WEBPACK_IMPORTED_MODULE_1__[\"FermentableTypes\"].grain ? amount : 0;\n  }));\n  var grainAbsorbtionRatio = BIAB ? 0.586 : 0.96; // number of ounces of water absorbed per ounce of the grain\n\n  var grainAbsorbtion = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"ouncesToLiters\"])(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"kgToOunces\"])(mashGrainWeight) * grainAbsorbtionRatio);\n  var totalMashWaterAdds = lauterDeadspace + Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"sum\"])(mash.mashSteps.map(function (_ref4) {\n    var type = _ref4.type,\n        infuseAmount = _ref4.infuseAmount;\n    return type !== _types_mashStep__WEBPACK_IMPORTED_MODULE_2__[\"MashType\"].decoction ? infuseAmount : 0;\n  })); // https://byo.com/bock/item/410-calculating-water-usage-advanced-brewing\n  // Total mash volume = volume of water + volume of grain\n  // Of course first it is necessary to know the volume that the grain displaces when mashed (which is different from its dry volume).\n  // Once again this depends on the specifics of the grain bill, but a value of 0.32 quarts per pound (0.67 L/kg) is a reasonable average.\n\n  var mashVolumeNeeded = totalMashWaterAdds + mashGrainWeight * 0.67;\n  var waterAvailFromMash = totalMashWaterAdds - grainAbsorbtion;\n  var spargeVol = boilSize + grainAbsorbtion - topUpKettle + lauterDeadspace - totalMashWaterAdds;\n  var estPreBoilVolume = waterAvailFromMash + (spargeVol - lauterDeadspace);\n  var boilOffVolume = estPreBoilVolume * evapRate * (boilTime / 60);\n  var postBoilVolume = estPreBoilVolume - boilOffVolume;\n  var coolingShrinkage = postBoilVolume * coolingLossPct;\n  var estBottlingVol = postBoilVolume - coolingShrinkage - trubChillerLoss - starterSize - fermentationLoss;\n  var totalWater = totalMashWaterAdds + spargeVol;\n  return {\n    totalWater: totalWater,\n    // Mashing\n    mashGrainWeight: mashGrainWeight,\n    grainAbsorbtion: grainAbsorbtion,\n    totalMashWaterAdds: totalMashWaterAdds,\n    mashVolumeNeeded: mashVolumeNeeded,\n    waterAvailFromMash: waterAvailFromMash,\n    spargeVol: spargeVol,\n    // Boiling\n    estPreBoilVolume: estPreBoilVolume,\n    boilOffVolume: boilOffVolume,\n    postBoilVolume: postBoilVolume,\n    coolingShrinkage: coolingShrinkage,\n    // Fermenting\n    estBottlingVol: estBottlingVol\n  };\n};\n\n//# sourceURL=webpack://brewcalc/./src/volumes.js?");

/***/ }),

/***/ "./src/waterChem.js":
/*!**************************!*\
  !*** ./src/waterChem.js ***!
  \**************************/
/*! exports provided: calcWaterChemistry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calcWaterChemistry\", function() { return calcWaterChemistry; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\nvar dilute = function dilute(value, dilution) {\n  return Math.round(value * (1 - dilution));\n};\n\nvar alkalinity = function alkalinity(value, dilution) {\n  if (dilution === void 0) {\n    dilution = 0;\n  }\n\n  return Math.round(value * (1 - dilution) * (50 / 61));\n};\n\nvar adjustmentsFromSalts = function adjustmentsFromSalts(batchSize, _ref) {\n  var CaCO3 = _ref.CaCO3,\n      NaHCO3 = _ref.NaHCO3,\n      CaSO4 = _ref.CaSO4,\n      CaCl2 = _ref.CaCl2,\n      MgSO4 = _ref.MgSO4,\n      NaCl = _ref.NaCl;\n  var adjCa = 0;\n  var adjMg = 0;\n  var adjSO4 = 0;\n  var adjNa = 0;\n  var adjCl = 0;\n  var adjHCO3 = 0;\n  CaCO3 = CaCO3 / 2;\n\n  if (CaCO3 > 0) {\n    adjCa = adjCa + 105 * CaCO3 / batchSize;\n    adjHCO3 = adjHCO3 + 321 * CaCO3 / batchSize;\n  }\n\n  if (NaHCO3 > 0) {\n    adjNa = adjNa + 75 * NaHCO3 / batchSize;\n    adjHCO3 = adjHCO3 + 191 * NaHCO3 / batchSize;\n  }\n\n  if (CaSO4 > 0) {\n    adjCa = adjCa + 61.5 * CaSO4 / batchSize;\n    adjSO4 = adjSO4 + 147.4 * CaSO4 / batchSize;\n  }\n\n  if (CaCl2 > 0) {\n    adjCa = adjCa + 72 * CaCl2 / batchSize;\n    adjCl = adjCl + 127 * CaCl2 / batchSize;\n  }\n\n  if (MgSO4 > 0) {\n    adjMg = adjMg + 26 * MgSO4 / batchSize;\n    adjSO4 = adjSO4 + 103 * MgSO4 / batchSize;\n  }\n\n  if (NaCl > 0) {\n    adjNa = adjNa + 104 * NaCl / batchSize;\n    adjCl = adjCl + 160 * NaCl / batchSize;\n  }\n\n  return {\n    name: 'adjustmentsFromSalts',\n    Ca: Math.round(adjCa),\n    Mg: Math.round(adjMg),\n    SO4: Math.round(adjSO4),\n    Na: Math.round(adjNa),\n    Cl: Math.round(adjCl),\n    HCO3: Math.round(adjHCO3),\n    alkalinity: alkalinity(Math.round(adjHCO3))\n  };\n};\n\nvar calcWaterChemistry = function calcWaterChemistry(batchSize, dilution, source, target, salts) {\n  var adjustmentsFromSaltsWater = adjustmentsFromSalts(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"litersToGallons\"])(batchSize), _extends({}, salts));\n  var dilutedWater = {\n    name: 'dilutedWater',\n    Ca: dilute(source.Ca, dilution),\n    Mg: dilute(source.Mg, dilution),\n    SO4: dilute(source.SO4, dilution),\n    Na: dilute(source.Na, dilution),\n    Cl: dilute(source.Cl, dilution),\n    HCO3: dilute(source.HCO3, dilution),\n    alkalinity: alkalinity(source.HCO3, dilution)\n  };\n  var adjustedWater = {\n    name: 'adjustedWater',\n    Ca: dilutedWater.Ca + adjustmentsFromSaltsWater.Ca,\n    Mg: dilutedWater.Mg + adjustmentsFromSaltsWater.Mg,\n    SO4: dilutedWater.SO4 + adjustmentsFromSaltsWater.SO4,\n    Na: dilutedWater.Na + adjustmentsFromSaltsWater.Na,\n    Cl: dilutedWater.Cl + adjustmentsFromSaltsWater.Cl,\n    HCO3: dilutedWater.HCO3 + adjustmentsFromSaltsWater.HCO3,\n    alkalinity: alkalinity(dilutedWater.HCO3 + adjustmentsFromSaltsWater.HCO3)\n  };\n  var difference = {\n    name: 'difference source water from target',\n    Ca: adjustedWater.Ca - target.Ca,\n    Mg: adjustedWater.Mg - target.Mg,\n    SO4: adjustedWater.SO4 - target.SO4,\n    Na: adjustedWater.Na - target.Na,\n    Cl: adjustedWater.Cl - target.Cl,\n    HCO3: adjustedWater.HCO3 - target.HCO3,\n    alkalinity: alkalinity(adjustedWater.HCO3 - target.HCO3)\n  };\n  return {\n    adjustedWater: adjustedWater,\n    dilutedWater: dilutedWater,\n    adjustmentsFromSalts: adjustmentsFromSaltsWater,\n    difference: difference,\n    sulphateChlorideRatio: adjustedWater.SO4 / adjustedWater.Cl\n  };\n};\n\n//# sourceURL=webpack://brewcalc/./src/waterChem.js?");

/***/ }),

/***/ "./src/xmlToJson.js":
/*!**************************!*\
  !*** ./src/xmlToJson.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var xmlToJson = function xmlToJson(xml) {\n  var result = {};\n\n  if (xml.childNodes == null || xml.childNodes.length === 0) {\n    result = '';\n  } else if (xml.childNodes.length === 1 && xml.childNodes.item(0).nodeType === 3) {\n    result = xml.childNodes.item(0).textContent;\n  } else {\n    xml.childNodes.map(function (item) {\n      if (item.nodeType !== 3) {\n        if (result[item.nodeName] === undefined) {\n          result[item.nodeName] = xmlToJson(item);\n        } else {\n          if (!Array.isArray(result[item.nodeName])) {\n            var value = result[item.nodeName];\n            result[item.nodeName] = [value];\n          }\n\n          result[item.nodeName].push(xmlToJson(item));\n        }\n      }\n    });\n  }\n\n  return result;\n};\n\nmodule.exports = xmlToJson;\n\n//# sourceURL=webpack://brewcalc/./src/xmlToJson.js?");

/***/ })

/******/ });
});