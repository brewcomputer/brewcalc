{"version":3,"sources":["components/CrossUnitsInput.js","components/RecipeSpecs.js","components/Ingredients.js","components/Stats.js","components/MashSteps.js","components/Recipe.js","data/equipment.js","containers/ImportArea.js","containers/EditorContainer.js","containers/PageRecipe.js","redux/reducers/updateEditor.js","data/recipe.js","App.js","registerServiceWorker.js","index.js"],"names":["unitLabelMap","sg","plato","F","C","stringifyMeasurable","measurable","precision","unit","value","toFixed","convertMeasurable","convert","printMeasurable","convertTo","CrossUnitsInput","name","description","units","primary","secondary","title","RecipeSpecs","recipe","equipment","author","type","batch_size","boil","boil_time","pre_boil_size","efficiency","Card","Header","Body","Row","className","Col","md","brewhouse","equipment_items","brew_kettle","boil_rate_per_hour","loss","lauterDeadspace","topUpKettle","Ingredients","ingredients","fermentable_additions","hop_additions","culture_additions","Table","striped","bordered","hover","map","i","index","key","amount","color","style","textTransform","alpha_acid","timing","time","attenuation","form","Stats","og","calcOriginalGravity","fg","calcFinalGravity","calcBoilVolumes","boilGravity","calcBoilGravity","ibu","bitternessIbuTinseth","calcColor","abv","calcABV","caloriesInOneL","calcCalories","backgroundColor","srmToCss","height","MashStepDescription","step","spargeVolume","display","infuseAmount","step_temperature","step_time","MashSteps","mashGrainWeight","calcMashGrainWeight","recalculatedMashSteps","recalculateMashSteps","mash","mash_steps","grain_temperature","sparge_volume","calcMashVolumes","Recipe","undefined","maximum_volume","connect","editorState","dispatch","onReloadEditorState","payload","FormGroup","FormControl","id","label","accept","onChange","e","reader","FileReader","file","target","files","readAsText","onloadend","result","includes","importFromBeerXml","beerjson","JSON","parse","stringify","recipes","err","console","warn","alert","href","onContentUpdate","Accordion","Toggle","eventKey","Collapse","mode","theme","width","maxLines","editorProps","$blockScrolling","Infinity","Container","error","tryParse","defaultState","version","asstBrewer","yield","fine_coarse_difference","potential","origin","supplier","notes","moisture","diastatic_power","protein","max_in_batch","recommend_mash","use","beta_acid","percent_lost","producer","productId","temperature_range","minimum","maximum","flocculation","best_for","max_reuse","times_cultured","addToSecondary","cultureDate","category","category_number","style_letter","style_guide","original_gravity","final_gravity","international_bitterness_units","carbonation","alcohol_by_volume","examples","ph","infuse_temperature","tasteNotes","tasteRating","fermentationStages","primaryAge","primaryTemp","secondaryAge","secondaryTemp","tertiaryAge","age","ageTemp","carbonationUsed","forcedCarbonation","primingSugarName","primingSugarEquiv","kegPrimingFactor","carbonationTemp","displayCarbTemp","date","estOg","estFg","estColor","ibuMethod","estAbv","actualEfficiency","calories","displayBatchSize","displayBoilSize","displayOg","displayFg","displayPrimaryTemp","displaySecondaryTemp","displayTertiaryTemp","displayAgeTemp","persistedState","localStorage","getItem","updateEditor","state","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","getState","App","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","render","document","getElementById","URL","process","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f2ccf912.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { convert } from \"brewcalc\";\n\nconst unitLabelMap = {\n  sg: \"SG\",\n  plato: \"°P\",\n  F: \"°F\",\n  C: \"°C\",\n};\n\nconst stringifyMeasurable = (measurable, precision) => {\n  const unit = unitLabelMap[measurable.unit] || measurable.unit;\n  const value =\n    precision != null ? +measurable.value.toFixed(precision) : measurable.value;\n  return `${value} ${unit}`;\n};\n\nconst convertMeasurable = (measurable, unit, precision) => {\n  return {\n    value: convert(measurable.value, measurable.unit, unit, precision),\n    unit: unit,\n  };\n};\n\nexport const printMeasurable = (measurable, convertTo, precision = 0) => {\n  if (measurable == null) {\n    return \"\";\n  }\n  if (convertTo == null) {\n    return stringifyMeasurable(measurable, precision);\n  }\n  return stringifyMeasurable(\n    convertMeasurable(measurable, convertTo, precision)\n  );\n};\n\nconst CrossUnitsInput = ({\n  name,\n  description,\n  measurable,\n  units = [],\n  precision = 2,\n}) => {\n  if (measurable == null || measurable.value == null) {\n    return null;\n  }\n\n  const [primary, secondary] = units;\n\n  return (\n    <div title={description}>\n      {name && <b>{name} </b>}\n      {printMeasurable(measurable, primary, precision)}\n      {secondary && ` (${printMeasurable(measurable, secondary, precision)})`}\n    </div>\n  );\n};\n\nCrossUnitsInput.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  measurable: PropTypes.shape({\n    value: PropTypes.number,\n    unit: PropTypes.string,\n  }),\n  units: PropTypes.arrayOf(PropTypes.string),\n  precision: PropTypes.number,\n};\n\nexport default CrossUnitsInput;\n","import React from \"react\";\nimport { Card, Col, Row } from \"react-bootstrap\";\n\nimport CrossUnitsInput from \"./CrossUnitsInput\";\n\nconst RecipeSpecs = ({ recipe, equipment }) => {\n  const {\n    name,\n    author,\n    type,\n    batch_size,\n    boil: { boil_time, pre_boil_size },\n    efficiency,\n  } = recipe;\n  return (\n    <Card>\n      <Card.Header>Recipe Specs and Equipment</Card.Header>\n      <Card.Body>\n        <Row className=\"show-grid\">\n          <Col md={6}>\n            <div>\n              <div title=\"Name of the recipe\">\n                {\" \"}\n                <b>Name</b> {name}{\" \"}\n              </div>\n              <div title=\"Name of the brewer\">\n                {\" \"}\n                <b>Brewer</b> {author}{\" \"}\n              </div>\n              <div title=\"May be one of “Extract”, “Partial Mash” or “All Grain”\">\n                {\" \"}\n                <b>Type</b> {type}{\" \"}\n              </div>\n              <CrossUnitsInput\n                description=\"Target size of the finished batch in liters\"\n                name=\"Batch Size\"\n                measurable={batch_size}\n                units={[\"l\", \"gal\"]}\n              />\n              <CrossUnitsInput\n                description=\"Starting size for the main boil of the wort in liters\"\n                name=\"Boil Size\"\n                measurable={pre_boil_size}\n                units={[\"l\", \"gal\"]}\n              />\n              <CrossUnitsInput\n                description=\"The total time to boil the wort in minutes\"\n                name=\"Boil Time\"\n                measurable={boil_time}\n              />\n              <CrossUnitsInput\n                description=\"The percent brewhouse efficiency to be used for estimating the starting gravity of the beer\"\n                name=\"Efficiency\"\n                measurable={efficiency.brewhouse}\n              />\n            </div>\n          </Col>\n          <Col md={6}>\n            {equipment === null ? (\n              <div>Equipment is not set</div>\n            ) : (\n              <div>\n                <div title=\"Name of the equipment profile – usually a text description of the brewing setup\">\n                  {\" \"}\n                  <b>Equipment Name</b> {equipment.name}{\" \"}\n                </div>\n                <CrossUnitsInput\n                  description=\"The target volume of the batch at the start of fermentation\"\n                  name=\"Batch Size\"\n                  measurable={batch_size}\n                  units={[\"l\", \"gal\"]}\n                />\n                <CrossUnitsInput\n                  description=\"The pre-boil volume used in this particular instance for this equipment setup.  Note that this may be a calculated\"\n                  name=\"Boil Size\"\n                  measurable={pre_boil_size}\n                  units={[\"l\", \"gal\"]}\n                />\n                <CrossUnitsInput\n                  description=\"The volume of wort lost to evaporation per hour of the boil\"\n                  name=\"Evap Rate\"\n                  measurable={\n                    equipment.equipment_items.brew_kettle.boil_rate_per_hour\n                  }\n                />\n                <CrossUnitsInput\n                  description=\"The amount of wort normally lost during transition from the boiler to the fermentation vessel\"\n                  name=\"Trub Chiller Loss\"\n                  measurable={equipment.equipment_items.brew_kettle.loss}\n                  units={[\"l\", \"gal\"]}\n                />\n                <CrossUnitsInput\n                  description=\"Amount lost to the lauter tun and equipment associated with the lautering process\"\n                  name=\"Lauter Deadspace\"\n                  measurable={equipment.lauterDeadspace}\n                  units={[\"l\", \"gal\"]}\n                  precision={2}\n                />\n                <CrossUnitsInput\n                  description=\"Amount normally added to the boil kettle before the boil\"\n                  name=\"TopUpKettle\"\n                  measurable={equipment.topUpKettle}\n                  units={[\"l\", \"gal\"]}\n                  precision={2}\n                />\n              </div>\n            )}\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\nexport default RecipeSpecs;\n","import React from \"react\";\nimport { Card, Table } from \"react-bootstrap\";\nimport CrossUnitsInput, { printMeasurable } from \"./CrossUnitsInput\";\n\nconst Ingredients = ({ recipe }) => {\n  const { fermentable_additions, hop_additions, culture_additions } =\n    recipe.ingredients;\n  return (\n    <Card>\n      <Card.Header>Ingredients</Card.Header>\n\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Amount</th>\n            <th>Name</th>\n            <th>Type</th>\n          </tr>\n        </thead>\n        <tbody>\n          {fermentable_additions.map((i, index) => (\n            <tr key={index}>\n              <td>\n                <CrossUnitsInput measurable={i.amount} units={[\"kg\", \"lb\"]} />\n              </td>\n              <td>\n                {i.name} ({printMeasurable(i.color, \"SRM\", 0)})\n              </td>\n              <td style={{ textTransform: \"capitalize\" }}>{i.type}</td>\n            </tr>\n          ))}\n          {hop_additions.map((i, index) => (\n            <tr key={index}>\n              <td>\n                <CrossUnitsInput measurable={i.amount} units={[\"g\", \"oz\"]} />\n              </td>\n              <td>\n                {i.name} ({printMeasurable(i.alpha_acid)} Alpha, Boil time{\" \"}\n                {printMeasurable(i.timing.time)})\n              </td>\n              <td>Hop</td>\n            </tr>\n          ))}\n          {culture_additions.map((i, index) => (\n            <tr key={index}>\n              <td>{printMeasurable(i.amount, null, 2)}</td>\n              <td>\n                {i.name} (Attenuation {printMeasurable(i.attenuation, null, 2)},\n                Form {i.form})\n              </td>\n              <td>Yeast</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Card>\n  );\n};\n\nexport default Ingredients;\n","import React from \"react\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport CrossUnitsInput, { printMeasurable } from \"./CrossUnitsInput\";\n\nimport {\n  calcOriginalGravity,\n  calcFinalGravity,\n  calcBoilGravity,\n  calcColor,\n  calcABV,\n  calcCalories,\n  srmToCss,\n  bitternessIbuTinseth,\n  convert,\n  calcBoilVolumes,\n} from \"brewcalc\";\n\nconst Stats = ({ recipe, equipment }) => {\n  const { batch_size, boil, ingredients, efficiency } = recipe;\n\n  const { fermentable_additions, hop_additions, culture_additions } =\n    ingredients;\n\n  const og = calcOriginalGravity(batch_size, fermentable_additions, efficiency);\n\n  const fg = calcFinalGravity(\n    batch_size,\n    fermentable_additions,\n    efficiency,\n    culture_additions\n  );\n\n  const { pre_boil_size } = calcBoilVolumes(batch_size, boil, equipment);\n\n  const boilGravity = calcBoilGravity(batch_size, pre_boil_size, og);\n\n  const ibu = bitternessIbuTinseth(hop_additions, boilGravity, batch_size);\n\n  const color = calcColor(fermentable_additions, batch_size);\n\n  const abv = calcABV(og, fg);\n  const calories = calcCalories(og.value, fg.value);\n  const caloriesInOneL = calories / (12 * convert(1, \"floz\", \"l\"));\n\n  return (\n    <Card>\n      <Card.Header>Gravity, Alcohol Content and Color</Card.Header>\n      <Card.Body>\n        <Row className=\"show-grid\">\n          <Col md={6}>\n            <div>\n              <CrossUnitsInput\n                description=\"The estimated original gravity of this recipe\"\n                name=\"Original Gravity\"\n                measurable={og}\n                units={[\"sg\", \"plato\"]}\n                precision={3}\n              />\n              <CrossUnitsInput\n                description=\"The estimated final gravity of this recipe\"\n                name=\"Final Gravity\"\n                measurable={fg}\n                units={[\"sg\", \"plato\"]}\n                precision={3}\n              />\n              <div title=\"The bitterness of the recipe as measured in International Bitterness Units\">\n                <b>Bitterness (IBUs): </b>\n                {printMeasurable(ibu, null, 0)} by Tinseth formula\n              </div>\n              <CrossUnitsInput\n                description=\"Estimated color of this beer\"\n                name=\"Color\"\n                measurable={color}\n                units={[\"SRM\", \"EBC\"]}\n                precision={0}\n              />\n              <div title=\"The estimated alcohol by volume for this recipe\">\n                <b>Alcohol by volume : </b>\n                {printMeasurable(abv)}\n              </div>\n              <div title=\"Calories in one liter of the beer, based on original and final gravities\">\n                <b>Calories: </b>\n                {caloriesInOneL.toFixed(0)} per one L\n              </div>\n            </div>\n          </Col>\n          <Col md={6}>\n            <div\n              style={{\n                backgroundColor: srmToCss(color.value),\n                height: 150,\n              }}\n            />\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Stats;\n","import React from \"react\";\nimport { Card, Table } from \"react-bootstrap\";\nimport {\n  recalculateMashSteps,\n  calcBoilVolumes,\n  calcMashVolumes,\n  calcMashGrainWeight,\n} from \"brewcalc\";\nimport CrossUnitsInput, { printMeasurable } from \"./CrossUnitsInput\";\n\n//TODO: Add BIAB\nconst MashStepDescription = ({ step, spargeVolume }) => {\n  switch (step.type) {\n    case \"decoction\":\n      return (\n        <td style={{ display: \"flex\" }}>\n          Decoct&nbsp;\n          <CrossUnitsInput measurable={step.amount} units={[\"l\", \"gal\"]} />\n          &nbsp;of mash and boil it\n        </td>\n      );\n    case \"temperature\":\n      if (step.infuseAmount > 0)\n        return (\n          <td style={{ display: \"flex\" }}>\n            Add&nbsp;\n            <CrossUnitsInput measurable={step.amount} units={[\"l\", \"gal\"]} />\n            &nbsp;of water and heat to&nbsp;\n            <CrossUnitsInput\n              measurable={step.step_temperature}\n              units={[\"C\", \"F\"]}\n              precision={0}\n            />\n          </td>\n        );\n      else\n        return (\n          <td style={{ display: \"flex\" }}>\n            Heat to&nbsp;\n            <CrossUnitsInput\n              measurable={step.step_temperature}\n              units={[\"C\", \"F\"]}\n              precision={0}\n            />\n            &nbsp;over&nbsp;{printMeasurable(step.step_time)}&nbsp;min\n          </td>\n        );\n    case \"sparge\":\n      return (\n        <td style={{ display: \"flex\" }}>\n          Fly sparge with&nbsp;\n          <CrossUnitsInput measurable={spargeVolume} units={[\"l\", \"gal\"]} />\n          &nbsp;water at&nbsp;\n          <CrossUnitsInput\n            measurable={step.step_temperature}\n            units={[\"C\", \"F\"]}\n            precision={0}\n          />\n        </td>\n      );\n    case \"infusion\":\n    default:\n      return (\n        <td style={{ display: \"flex\" }}>\n          Add&nbsp;\n          <CrossUnitsInput measurable={step.amount} units={[\"l\", \"gal\"]} />\n          &nbsp;of water at&nbsp;\n          <CrossUnitsInput\n            measurable={step.step_temperature}\n            units={[\"C\", \"F\"]}\n            precision={0}\n          />\n        </td>\n      );\n  }\n};\n\nconst MashSteps = ({ recipe, equipment }) => {\n  const mashGrainWeight = calcMashGrainWeight(\n    recipe.ingredients.fermentable_additions\n  );\n  const recalculatedMashSteps = recalculateMashSteps(\n    recipe.mash.mash_steps,\n    recipe.mash.grain_temperature,\n    mashGrainWeight\n  );\n\n  const { pre_boil_size } = calcBoilVolumes(\n    recipe.batch_size,\n    recipe.boil,\n    equipment\n  );\n\n  const { sparge_volume } = calcMashVolumes(\n    pre_boil_size,\n    recalculatedMashSteps,\n    mashGrainWeight,\n    equipment\n  );\n\n  return (\n    <Card>\n      <Card.Header>Mash Steps</Card.Header>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Step Temperature</th>\n            <th>Step Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {recalculatedMashSteps.map((step, index) => (\n            <tr key={index}>\n              <td>{step.name}</td>\n              <MashStepDescription step={step} spargeVolume={sparge_volume} />\n              <td>\n                <CrossUnitsInput\n                  measurable={step.step_temperature}\n                  units={[\"C\", \"F\"]}\n                  precision={0}\n                />\n              </td>\n              <td>\n                <CrossUnitsInput\n                  measurable={step.step_time}\n                  units={[\"min\"]}\n                  precision={0}\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Card>\n  );\n};\n\nexport default MashSteps;\n","import React from 'react'\nimport RecipeSpecs from './RecipeSpecs'\nimport Ingredients from './Ingredients'\nimport Stats from './Stats'\nimport MashSteps from './MashSteps'\n\nconst Recipe = ({ recipe, equipment }) =>\n  recipe !== undefined &&\n  <div>\n    <RecipeSpecs recipe={recipe} equipment={equipment} />\n    <Ingredients recipe={recipe} />\n\n    {equipment !== null &&\n      <MashSteps recipe={recipe} equipment={equipment} />\n    }\n    <Stats recipe={recipe} equipment={equipment} />\n\n  </div>\nexport default Recipe\n","export const equipment = {\n  name: \"Pot (13 Gal/50 L) - BIAB\",\n  equipment_items: {\n    brew_kettle: {\n      name: \"Pot (13 Gal/50 L) - BIAB\",\n      form: \"Brew Kettle\",\n      maximum_volume: {\n        value: 50,\n        unit: \"l\",\n      },\n      loss: {\n        value: 3.8232879,\n        unit: \"l\",\n      },\n      boil_rate_per_hour: {\n        value: 5.364,\n        unit: \"l\",\n      },\n    },\n  },\n\n  /*boilSize: 36.019978,\n  batchSize: 23.0154363,\n  tunVolume: 50.0055779,\n  tunWeight: 6.9989246,\n  tunSpecificHeat: 0.12,\n  topUpWater: \"0.0000000\",\n  trubChillerLoss: 3.8232879,\n  evapRate: 0.14923151,\n  boilTime: \"90.0000000\",\n  calcBoilVolume: \"TRUE\",\n  lauterDeadspace: 0,\n  topUpKettle: 0,\n  hopUtilization: \"100.0000000\",\n  coolingLossPct: 0.04,\n  efficiency: 0.68,\n  BIAB: false,\n\n\n  tunWeight: \"144.0000000\",\n  tunSpecificHeat: \"0.3000000\",\n  displayTunTemp: \"22.2 C\",\n  displayTunWeight: \"4.08 kg\",\n\n  */\n};\n","import React from \"react\";\nimport { FormGroup, FormControl, Card, Row, Col } from \"react-bootstrap\";\nimport importFromBeerXml from \"@beerjson/beerjson/js/beerxml-to-beerjson\";\nimport { equipment } from \"../data/equipment\";\nimport { connect } from \"react-redux\";\n\nconst ImportArea = ({ editorState, onReloadEditorState }) => {\n  const onXmlLoaded = (e) => {\n    const reader = new FileReader();\n    const file = e.target.files[0];\n    reader.readAsText(file);\n    reader.onloadend = function () {\n      try {\n        const result = file.type.includes(\"xml\")\n          ? importFromBeerXml(reader.result)\n          : reader.result;\n\n        const { beerjson } = JSON.parse(result);\n        // TODO: equipment\n        onReloadEditorState(\n          JSON.stringify(\n            {\n              recipe: beerjson.recipes[0],\n              equipment: equipment /*beerjson.equipment*/,\n            },\n            null,\n            4\n          )\n        );\n      } catch (err) {\n        console.warn(err);\n        alert(\"Can't import from BeerXML, see console for the details\");\n      }\n    };\n  };\n\n  return (\n    <Row className=\"show-grid\">\n      <Col md={6}>\n        <Card>\n          <Card.Header>Upload BeerXML / BeerJSON file</Card.Header>\n          <Card.Body>\n            <FormGroup>\n              <FormControl\n                id=\"formControlsFile\"\n                type=\"file\"\n                label=\"File\"\n                accept=\"application/xml,application/json\"\n                onChange={onXmlLoaded}\n              />\n            </FormGroup>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col md={6}>\n        <Card>\n          <Card.Header>brewcalc</Card.Header>\n          <Card.Body>\n            <div>\n              A modern (ES6) functional JavaScript library for brewing\n              calculations.\n            </div>\n            <a href=\"https://github.com/brewcomputer/brewcalc\">\n              brewcalc lib on the GitHub (MIT license)\n            </a>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ editorState }) => ({ editorState });\n\nconst mapDispatchToProps = (dispatch) => ({\n  onReloadEditorState: (editorState) => {\n    dispatch({\n      type: \"UPDATE_EDITOR_STATE\",\n      payload: editorState,\n    });\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImportArea);\n","import React from \"react\";\nimport { Accordion } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\n\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/mode-json\";\n\n//TODO:\n//https://github.com/securingsincity/react-ace/issues/240\n\nconst EditorContainer = ({ editorState, onContentUpdate }) => (\n  <Accordion>\n    <Accordion.Toggle eventKey=\"1\">\n      &#8680; Expand and edit recipe and equipment JSON\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey=\"1\">\n      <AceEditor\n        mode=\"json\"\n        theme=\"github\"\n        onChange={onContentUpdate}\n        value={editorState}\n        width=\"100%\"\n        maxLines={100}\n        editorProps={{ $blockScrolling: Infinity }}\n      />\n    </Accordion.Collapse>\n  </Accordion>\n);\n\nconst mapStateToProps = ({ editorState }) => ({ editorState });\n\nconst mapDispatchToProps = (dispatch) => ({\n  onContentUpdate: (editorState) => {\n    dispatch({\n      type: \"UPDATE_EDITOR_STATE\",\n      payload: editorState,\n    });\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditorContainer);\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Recipe from \"../components/Recipe\";\nimport ImportArea from \"./ImportArea\";\nimport EditorContainer from \"./EditorContainer\";\n\nimport { connect } from \"react-redux\";\n\nconst PageRecipe = ({ editorState }) => {\n  const tryParse = (editorState) => {\n    try {\n      return JSON.parse(editorState);\n    } catch (error) {\n      return null;\n    }\n  };\n  return (\n    <Container>\n      <ImportArea />\n      <Recipe {...tryParse(editorState)} />\n      <EditorContainer />\n    </Container>\n  );\n};\n\nconst mapStateToProps = ({ editorState }) => ({ editorState });\n\nexport default connect(mapStateToProps)(PageRecipe);\n","import { recipe } from '../../data/recipe'\nimport { equipment } from '../../data/equipment'\n\nconst defaultState = {\n  editorState: JSON.stringify({ recipe, equipment }, null, 4)\n}\n\nconst updateEditor = (state = defaultState, { payload, type }) => {\n  if (type === 'UPDATE_EDITOR_STATE') {\n    return {\n      ...state,\n      editorState: payload\n    }\n  }\n  return state\n}\n\nexport const persistedState = localStorage.getItem('brewCalcState')\n  ? JSON.parse(localStorage.getItem('brewCalcState'))\n  : defaultState\n\nexport default updateEditor\n","export const recipe = {\n  name: \"Aussie Ale\",\n  version: \"1\",\n  type: \"All Grain\",\n  author: \"Steve Nicholls\",\n  asstBrewer: \"\",\n  batch_size: {\n    value: 23.02,\n    unit: \"l\",\n  },\n  boil: {\n    pre_boil_size: {\n      value: 37.1203164,\n      unit: \"l\",\n    },\n    boil_time: { value: 90, unit: \"min\" },\n  },\n  efficiency: { brewhouse: { value: 68, unit: \"%\" } },\n  ingredients: {\n    fermentable_additions: [\n      {\n        name: \"Pale Malt (2 Row) UK\",\n        type: \"grain\",\n        amount: { value: 4.4969891, unit: \"kg\" },\n        yield: {\n          fine_coarse_difference: { value: 1.5, unit: \"%\" },\n          potential: { value: 1.029992, unit: \"sg\" },\n        },\n        color: { value: 4.925, unit: \"EBC\" },\n        origin: \"United Kingdom\",\n        supplier: \"\",\n        notes:\n          \"Base malt for all English beer styles\\r\\nLower diastatic power than American 2 Row Pale Malt\",\n        moisture: {\n          value: 4,\n          unit: \"%\",\n        },\n        diastatic_power: {\n          value: 45,\n          unit: \"Lintner\",\n        },\n        protein: {\n          value: 10.1,\n          unit: \"%\",\n        },\n        max_in_batch: {\n          value: 100,\n          unit: \"%\",\n        },\n        recommend_mash: false,\n      },\n      {\n        name: \"Munich Malt - 20L\",\n        type: \"grain\",\n        amount: { value: 518.8834, unit: \"g\" },\n        yield: {\n          fine_coarse_difference: { value: 2.8, unit: \"%\" },\n          potential: { value: 1.0345, unit: \"sg\" },\n        },\n        color: { value: 39.4, unit: \"EBC\" },\n        origin: \"US\",\n        supplier: \"\",\n        notes:\n          \"Malty-sweet flavor characteristic and adds a orange to deep orange color to the beer.\\r\\nDoes not contribute signficantly to body or head retention.\\r\\nUse for: Bock, Porter, Marzen, Oktoberfest beers\",\n        moisture: {\n          value: 5,\n          unit: \"%\",\n        },\n        diastatic_power: {\n          value: 25,\n          unit: \"Lintner\",\n        },\n        protein: {\n          value: 13.5,\n          unit: \"%\",\n        },\n        max_in_batch: {\n          value: 80,\n          unit: \"%\",\n        },\n        recommend_mash: true,\n      },\n      {\n        name: \"Caramel/Crystal Malt - 20L\",\n        type: \"grain\",\n        amount: { value: 0.201788, unit: \"kg\" },\n        yield: {\n          fine_coarse_difference: { value: 1.5, unit: \"%\" },\n          potential: { value: 1.0345, unit: \"sg\" },\n        },\n        color: { value: 39.4, unit: \"EBC\" },\n        origin: \"US\",\n        supplier: \"\",\n        notes:\n          \"Adds body, color and improves head retention.\\r\\nAlso called &#34;Crystal&#34; malt.\",\n        moisture: {\n          value: 4,\n          unit: \"%\",\n        },\n        diastatic_power: {\n          value: 0,\n          unit: \"Lintner\",\n        },\n        protein: {\n          value: 13.2,\n          unit: \"%\",\n        },\n        max_in_batch: {\n          value: 20,\n          unit: \"%\",\n        },\n        recommend_mash: false,\n      },\n      {\n        name: \"Roasted Barley\",\n        type: \"grain\",\n        amount: { value: 0.046123, unit: \"kg\" },\n        yield: {\n          fine_coarse_difference: { value: 1.5, unit: \"%\" },\n          potential: { value: 1.0253, unit: \"sg\" },\n        },\n        color: { value: 591.0, unit: \"EBC\" },\n        origin: \"US\",\n        supplier: \"\",\n        notes:\n          \"Roasted at high temperature to create a burnt, grainy, coffee like flavor.\\r\\nImparts a red to deep brown color to beer, and very strong roasted flavor.\\r\\nUse 2-4% in Brown ales to add a nutty flavor, or 3-10% in Porters and Stouts for coffee flavor.\",\n        moisture: {\n          value: 5,\n          unit: \"%\",\n        },\n        diastatic_power: {\n          value: 0,\n          unit: \"Lintner\",\n        },\n        protein: {\n          value: 13.2,\n          unit: \"%\",\n        },\n        max_in_batch: {\n          value: 10,\n          unit: \"%\",\n        },\n        recommend_mash: false,\n      },\n      {\n        name: \"Cane (Beet) Sugar\",\n        type: \"sugar\",\n        amount: { value: 0.2613635, unit: \"kg\" },\n        yield: {\n          fine_coarse_difference: { value: 1.5, unit: \"%\" },\n          potential: { value: 1.046, unit: \"sg\" },\n        },\n        color: { value: 0, unit: \"EBC\" },\n        origin: \"US\",\n        supplier: \"\",\n        notes:\n          \"Common household baking sugar.\\r\\nLightens flavor and body of beer.\\r\\nCan contribute a cider-like flavor to the beer if not cold-fermented or used in large quantities.\",\n        moisture: {\n          value: 4,\n          unit: \"%\",\n        },\n        diastatic_power: {\n          value: 120,\n          unit: \"Lintner\",\n        },\n        protein: {\n          value: 11.7,\n          unit: \"%\",\n        },\n        max_in_batch: {\n          value: 7,\n          unit: \"%\",\n        },\n        recommend_mash: false,\n      },\n    ],\n    hop_additions: [\n      {\n        name: \"Pride of Ringwood\",\n        origin: \"Australia\",\n        alpha_acid: {\n          value: 10,\n          unit: \"%\",\n        },\n        amount: { value: 5.2055, unit: \"g\" },\n        timing: {\n          // TODO: first wort???\n          use: \"add_to_boil\",\n          time: { value: 60, unit: \"min\" },\n        },\n        notes:\n          \"Use for: General purpose bittering hops for Australian beers\\r\\nAroma: Moderate citric aroma, clean bittering flavor\\r\\nSubstitutes: Cluster, Galena\",\n        type: \"Both\",\n        form: \"leaf\",\n        beta_acid: {\n          value: 5.8,\n          unit: \"%\",\n        },\n        percent_lost: {\n          value: 45,\n          unit: \"%\",\n        },\n      },\n      {\n        name: \"Pride of Ringwood\",\n        origin: \"Australia\",\n        alpha_acid: {\n          value: 10,\n          unit: \"%\",\n        },\n        amount: { value: 5.2055, unit: \"g\" },\n        timing: {\n          use: \"add_to_boil\",\n          time: { value: 45, unit: \"min\" },\n        },\n        notes:\n          \"Use for: General purpose bittering hops for Australian beers\\r\\nAroma: Moderate citric aroma, clean bittering flavor\\r\\nSubstitutes: Cluster, Galena\",\n        type: \"bittering\",\n        form: \"pellet\",\n        beta_acid: {\n          value: 5.8,\n          unit: \"%\",\n        },\n        percent_lost: {\n          value: 45,\n          unit: \"%\",\n        },\n      },\n      {\n        name: \"Pride of Ringwood\",\n        origin: \"Australia\",\n        alpha_acid: {\n          value: 10,\n          unit: \"%\",\n        },\n        amount: { value: 31.2328, unit: \"g\" },\n        timing: {\n          use: \"add_to_boil\",\n          time: { value: 15, unit: \"min\" },\n        },\n        notes:\n          \"Use for: General purpose bittering hops for Australian beers\\r\\nAroma: Moderate citric aroma, clean bittering flavor\\r\\nSubstitutes: Cluster, Galena\",\n        type: \"aroma/bittering\",\n        form: \"leaf\",\n        beta_acid: {\n          value: 5.8,\n          unit: \"%\",\n        },\n        percent_lost: {\n          value: 45,\n          unit: \"%\",\n        },\n      },\n      {\n        name: \"Pride of Ringwood\",\n        origin: \"Australia\",\n        alpha_acid: {\n          value: 10,\n          unit: \"%\",\n        },\n        amount: { value: 15.6818, unit: \"g\" },\n        timing: {\n          use: \"add_to_boil\",\n          time: { value: 0, unit: \"min\" },\n        },\n        notes:\n          \"Use for: General purpose bittering hops for Australian beers\\r\\nAroma: Moderate citric aroma, clean bittering flavor\\r\\nSubstitutes: Cluster, Galena\",\n        type: \"bittering\",\n        form: \"leaf\",\n        beta_acid: {\n          value: 5.8,\n          unit: \"%\",\n        },\n        percent_lost: {\n          value: 45,\n          unit: \"%\",\n        },\n      },\n    ],\n    culture_additions: [\n      {\n        name: \"American Ale\",\n        type: \"ale\",\n        form: \"liquid\",\n        amount: {\n          value: 0.125048,\n          unit: \"ml\",\n        },\n        producer: \"Wyeast Labs\",\n        productId: \"1056\",\n        temperature_range: {\n          minimum: {\n            value: 15.5555556,\n            unit: \"C\",\n          },\n          maximum: {\n            value: 22.2222222,\n            unit: \"C\",\n          },\n        },\n        flocculation: \"medium\",\n        attenuation: { value: 75, unit: \"%\" },\n        notes:\n          \"Soft, smooth, clean finish.  Very well balanced.  Very versitile -- works well with many ale styles.\",\n        best_for:\n          \"American Pale Ale, Scottish Ale, Porters, Sweet Stout, Barley Wine, Alt\",\n        max_reuse: 5,\n        times_cultured: 0,\n        addToSecondary: false,\n        cultureDate: \"18 Jun 2003\",\n      },\n    ],\n  },\n  style: {\n    name: \"Australian Ale\",\n    category: \"beer\",\n    category_number: 1,\n    style_letter: \"A\",\n    style_guide: \"\",\n    type: \"Ale\",\n    original_gravity: {\n      minimum: {\n        value: 1.035,\n        unit: \"sg\",\n      },\n      maximum: {\n        value: 1.06,\n        unit: \"sg\",\n      },\n    },\n    final_gravity: {\n      minimum: {\n        value: 1.008,\n        unit: \"sg\",\n      },\n      maximum: {\n        value: 1.015,\n        unit: \"sg\",\n      },\n    },\n    international_bitterness_units: {\n      minimum: {\n        value: 10,\n        unit: \"IBUs\",\n      },\n      maximum: {\n        value: 30,\n        unit: \"IBUs\",\n      },\n    },\n    color: {\n      minimum: {\n        value: 3.94,\n        unit: \"EBC\",\n      },\n      maximum: {\n        value: 19.7,\n        unit: \"EBC\",\n      },\n    },\n    carbonation: {\n      minimum: {\n        value: 2.2,\n        unit: \"vols\",\n      },\n      maximum: {\n        value: 2.8,\n        unit: \"vols\",\n      },\n    },\n    alcohol_by_volume: {\n      minimum: {\n        value: 2,\n        unit: \"%\",\n      },\n      maximum: {\n        value: 5,\n        unit: \"%\",\n      },\n    },\n    notes: \"Medium malt with slight grain dryness\",\n    ingredients: \"Pride of Ringwood hops.\",\n    examples: \"Cooper's Pale Ale\",\n  },\n  mash: {\n    name: \"Single Infusion, Medium Body\",\n    grain_temperature: {\n      value: 22.22,\n      unit: \"C\",\n    },\n    notes:\n      \"Simple single infusion mash for use with most modern well modified grains (about 95% of the time).\",\n    ph: \"5.4000000\",\n    mash_steps: [\n      {\n        name: \"Mash In\",\n        type: \"infusion\",\n        infuse_temperature: {\n          value: 74.1,\n          unit: \"C\",\n        },\n        amount: {\n          value: 16.76,\n          //value: 13.7276426,\n          unit: \"l\",\n        },\n        step_time: {\n          value: 60,\n          unit: \"min\",\n        },\n        step_temperature: {\n          value: 66.67,\n          unit: \"C\",\n        },\n      },\n      {\n        name: \"Mash Out\",\n        type: \"infusion\",\n        infuse_temperature: {\n          value: 98.5,\n          unit: \"C\",\n        },\n        amount: {\n          value: 7.6874799,\n          unit: \"l\",\n        },\n        step_time: {\n          value: 10,\n          unit: \"min\",\n        },\n        step_temperature: {\n          value: 75.55,\n          unit: \"C\",\n        },\n      },\n      {\n        name: \"Sparge\",\n        type: \"sparge\",\n        step_temperature: {\n          value: 75.5555556,\n          unit: \"C\",\n        },\n        step_time: {\n          value: 10,\n          unit: \"min\",\n        },\n      },\n    ],\n  },\n  notes:\n    \"FWH the first  hop addition.\\r\\nAllow last addition to sit for 5 minutes to release aroma.\",\n  tasteNotes:\n    \"Very similar to Australian beers in the 60&#39;s.  Pride of Ringwood is the traditional hop used for a very large number of Australian beers. Although not considered a typical flavour hop it works very well as a single hopped beer.  Aim for 50 - 100 ppm of C\",\n  tasteRating: \"41.0000000\",\n  og: 1.044,\n  fg: 1.008,\n  carbonation: \"2.4000000\",\n  fermentationStages: \"2\",\n  primaryAge: \"4.0000000\",\n  primaryTemp: \"19.4444444\",\n  secondaryAge: \"10.0000000\",\n  secondaryTemp: \"19.4444444\",\n  tertiaryAge: \"7.0000000\",\n  age: \"30.0000000\",\n  ageTemp: \"18.3333333\",\n  carbonationUsed: \"Bottle with 133.96 g Corn Sugar\",\n  forcedCarbonation: true,\n  primingSugarName: \"Corn Sugar\",\n  primingSugarEquiv: \"1.0000000\",\n  kegPrimingFactor: \"0.5000000\",\n  carbonationTemp: \"21.1111111\",\n  displayCarbTemp: \"21.1 C\",\n  date: \"14 May 2011\",\n  estOg: \"1.044 SG\",\n  estFg: \"1.008 SG\",\n  estColor: \"16.8 EBC\",\n  ibu: \"28.0 IBUs\",\n  ibuMethod: \"Tinseth\",\n  estAbv: \"4.7 %\",\n  abv: \"4.7 %\",\n  actualEfficiency: \"68.0 %\",\n  calories: \"405.4 kcal/l\",\n  displayBatchSize: \"23.02 l\",\n  displayBoilSize: \"37.12 l\",\n  displayOg: \"1.044 SG\",\n  displayFg: \"1.008 SG\",\n  displayPrimaryTemp: \"19.4 C\",\n  displaySecondaryTemp: \"19.4 C\",\n  displayTertiaryTemp: \"18.3 C\",\n  displayAgeTemp: \"18.3 C\",\n};\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport PageRecipe from './containers/PageRecipe'\nimport updateEditor from './redux/reducers/updateEditor'\nimport { persistedState } from './redux/reducers/updateEditor'\n\nconst store = createStore(\n  updateEditor,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\nstore.subscribe(() => {\n  localStorage.setItem('brewCalcState', JSON.stringify(store.getState()))\n})\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <PageRecipe />\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}